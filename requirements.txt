# **Artifact Virtual Stack Overview**

# =========================
# 1. AI & LLM Layer
# =========================
torch>=2.3.0
# tensorflow is optional, uncomment if needed
# tensorflow>=2.16.1
transformers>=4.41.2
fastapi>=0.110.0
uvicorn>=0.29.0
langchain>=0.1.50
mlflow>=2.12.1
wandb>=0.16.6
tritonclient[all]>=2.41.0  # For Triton Inference Server client
flask>=2.3.0  # For web chat interface

# =========================
# 2. Agentic Orchestration
# =========================
celery>=5.4.0
ray>=2.23.0
apache-airflow>=2.9.0

# =========================
# 3. Blockchain / Web3
# =========================
web3>=6.15.1
etherscan-python>=1.3.0
openzeppelin-defender>=1.0.0
auth0-python>=4.0.0
ory-kratos-client>=0.11.0
thegraph-python>=0.2.0
chainlink>=1.0.0
bandprotocol>=0.1.0

# =========================
# 4. Quantum / Security
# =========================
qiskit>=1.0.2
cirq>=1.2.0
cryptography>=42.0.5
pycryptodome>=3.20.0

# =========================
# 5. Orchestration & Deployment
# =========================
docker>=7.0.0
kubernetes>=29.0.0
pyhelm>=2.0.0
istio-client>=1.16.2
linkerd>=0.1.0
kong-python>=0.1.0
nginxparser>=1.7.0

# =========================
# 6. Monitoring, Security & Compliance
# =========================
prometheus-client>=0.20.0
grafana-api>=2.0.0
loki-logger>=0.1.0
hvac>=2.1.0

# =========================
# 7. Miscellaneous
# =========================
pyjwt>=2.8.0

# =========================
# 8. Optional / Not on PyPI
# =========================

ollama
pygame
watchdog

requests>=2.31.0

# =========================

# For secure enclave integration, use sgx-sdk if needed (not on PyPI)
# For post-quantum crypto, use CRYSTALS-Kyber, Dilithium, etc.
# For frontend: React, Next.js, D3.js, Three.js (JavaScript ecosystem)
# For Rust/WASM: Substrate, custom blockchain, etc.

# =========================
# **Stack Documentation (Updated)**
# =========================

## 1. **AI & LLM Layer**
# - Training Frameworks: PyTorch (torch), TensorFlow (optional)
# - Distributed Computing: Ray, NVIDIA CUDA/cuDNN (system-level)
# - Model Serving/Inference: FastAPI, Triton Inference Server (tritonclient)
# - Version Control & Experiment Tracking: MLflow, Weights & Biases (wandb)

## 2. **AI Abstraction / Agentic Orchestration**
# - Agent Framework: LangChain, OpenAI Function Calling (API)
# - Job Orchestration: Celery, Apache Airflow

## 3. **Blockchain Layer**
# - Core Blockchain Engine: Substrate (Rust), Ethereum (Solidity)
# - Governance Layer: Rust, WebAssembly (WASM)
# - Node Management: Docker
# - NFT and Self-Amending Logic: ERC-721/1155 (Solidity)

## 4. **Quantum/High-Security Backend**
# - Quantum Simulation: Qiskit, Cirq
# - Cryptography: cryptography, pycryptodome, post-quantum libraries (external)
# - Multi-signature Wallets: Gnosis Safe (API)
# - Secure Enclaves: Intel SGX/HSM (external)

## 5. **Orchestration & Deployment**
# - Containerization: Docker
# - Orchestration: Kubernetes
# - Service Mesh: Istio, Linkerd
# - API Gateway: Kong, NGINX
# - CI/CD: GitHub Actions, GitLab CI, Helm (external)

## 6. **Data Layer & Oracles**
# - On-chain/Off-chain Data: Chainlink, Band Protocol
# - Data Indexing: The Graph

## 7. **User Interface & Visualization**
# - Frontend: React, Next.js, TypeScript (JavaScript ecosystem)
# - Data Visualization: D3.js, Three.js (JavaScript ecosystem)

## 8. **Monitoring, Security & Compliance**
# - Monitoring: Prometheus, Grafana, Loki
# - Audit & Compliance: OpenZeppelin Defender
# - Identity & Access Management: Auth0, Ory Kratos
# - Secrets Management: HashiCorp Vault (hvac)

# **Integration Workflow**
# 1. Data Input and Processing: APIs or direct user input, microservices process and vectorize data.
# 2. API Interaction: Frontend retrieves processed data and insights from backend services.
# 3. Blockchain Interaction: Processed data triggers smart contracts for immutable storage/execution.
# 4. User Engagement: Users access results and insights via a modern, interactive UI.

# **Installation Requirements**
# All Python packages above are required for the Artifact Virtual Stack. For non-Python components, see documentation above.

# For Go-based tooling (amneziawg-go, etc.), install Go from https://go.dev/dl/ or use:
# Windows: winget install -e --id Golang.Go
# Linux:   sudo apt-get install golang
# macOS:   brew install go
#
# This is a Python requirements file. Go is a system dependency.

# System requirement: certbot (https://certbot.eff.org/instructions)
# On Windows, install manually or with Chocolatey: choco install certbot -y


