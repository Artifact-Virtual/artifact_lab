# USER LOCKED
1 - warp install for simulation or altrenate.



------------------------------------------------------------------------------
╔════════════════════════════════════════════════════════════════════════════╗
║                  STANDARD OPERATING PROCEDURES (SOP)                       ║
╠════════════════════════════════════════════════════════════════════════════╣
    1. ▶ Always run `./run.sh` from root when you login to the workspace.
    2. ▶ Use `python workspace_manager/webchat.py` to start the AVA system.
    3. ▶ Access file manager at http://localhost:8080/file-manager for development.
    4. ▶ Access AI chat interface at http://localhost:8080 for assistance.
    5. ▶ Use the new Studio interface (`studio.html`/`studio_enhanced.html`) for advanced Monaco+AI+search workflows (coming soon).
    6. ▶ Follow PEP8 guidelines for Python code.
    7. ▶ Always update this file. ALWAYS. No exceptions.
    8. ▶ Perform a full codebase review periodically to ensure no errors exist.
                ▸ Fix all issues, big or small, without workarounds or cutting corners.
    9. ▶ Always validate and fix JSON config files for strict compliance
                ▸ (no trailing commas, valid syntax).
   10. ▶ Ensure all model/provider logic is routed through a single config file (`config.json`).
   11. ▶ Standardize import paths and config resolution for all entry-point scripts.
   12. ▶ ALWAYS UPDATE workspace_manager\config.json with latest updated SOPs (this file).
   13. ▶ LLM must have secure, auditable read/write access to the codebase via backend API.
   14. ▶ LLM should be able to both suggest and directly make codebase changes (with audit trail).
   15. ▶ Backend API must support advanced file/code management (list, read, write, create, search).
   16. ▶ Monaco Editor is primary development interface; ensure all file operations work seamlessly.
   17. ▶ If using vector DB or code store, ensure LLM can utilize for semantic code search.
   18. ▶ All LLM-driven changes must be user-controllable (approve, undo) and meticulously logged.   19. ▶ AVA File Manager and Studio must maintain VS Code-like experience with professional interface.
   20. ▶ Monitor server status regularly; restart if connections fail.
   21. ▶ Ensure Ollama service is running before starting any AVA components.
   22. ▶ Use Monaco Editor as primary development environment with AI chat integration.
   23. ▶ Integrate Windmill for enhanced workflow automation (planned, see roadmap).
   24. ▶ Maintain comprehensive documentation for all file manager and studio capabilities.
   25. ▶ Use the chat panel in Studio for AI-driven file operations and code assistance (planned).

╠════════════════════════════════════════════════════════════════════════════╣
║                                CHANGELOG                                   ║
╠════════════════════════════════════════════════════════════════════════════╣ 
 ✅ PHASE 1 COMPLETE: Backend API for file management implemented and operational
 ✅ Enhanced webchat running on http://localhost:8080 with file operations API
 ✅ File operations audit logging system implemented with secure path validation
 ✅ API endpoints for list, read, write, create, search operations functional
 ✅ LLM has enhanced context awareness of file management capabilities
 ✅ PHASE 2 COMPLETE: Monaco Editor integration for direct code editing
 ✅ Full-featured code editor with syntax highlighting, file explorer, and save functionality
 ✅ LLM interaction logging and audit trail system implemented
 ✅ Enhanced chat interface with file context and code modification capabilities
 ✅ PHASE 3 COMPLETE: System operational with troubleshooting procedures
 ✅ AVA system fully functional with comprehensive monitoring and restart capabilities ✅ PHASE 4 COMPLETE: Monaco-First File Manager Implementation
 ✅ Professional VS Code-like interface with 180+ language support
 ✅ Dedicated file manager at / (root) endpoint - now default interface
 ✅ ADAM-matching color scheme: pure black background, white text, gray accents
 ✅ Clean, professional UI with consistent monochromatic theme ✅ Comprehensive documentation created (FILE_MANAGER.md, STUDIO_FEATURES.md)
 ✅ Enhanced visualizer streamlined (3D visualizer removed)
 ✅ Updated all project documentation (README.md, WORKSPACE_MANAGER.md)
 ✅ Studio interface (Monaco+AI+search) ready for Phase 5
 🔄 PHASE 5 PENDING: Advanced integrations (Windmill, workflow automation)
 🔄 PHASE 6 PENDING: Chat integration with file context, multi-file/project operations, advanced search, git, and collaboration

╠════════════════════════════════════════════════════════════════════════════╣
║                  AVA FILE MANAGER & STUDIO OPERATIONAL PROCEDURES (2025-06-23)      ║
╠════════════════════════════════════════════════════════════════════════════╣
 ▶ DAILY STARTUP CHECKLIST:
   1. Verify Ollama service: `ollama list` (confirm models available)
   2. Start AVA server: `cd workspace_manager && python webchat.py`
   3. Test file manager: http://localhost:8080 (now default interface)
   4. Test legacy chat interface: http://localhost:8080/chat-old
   5. Test Studio interface: http://localhost:8080/studio (Phase 5)
   6. Verify file operations: open, edit, save functionality
 ▶ FILE MANAGER & STUDIO OPERATIONS:
   • Primary Interface: http://localhost:8080 (Monaco file manager - default)
   • Studio Interface: http://localhost:8080/studio (Phase 5 - advanced integrations)
   • Legacy Chat: http://localhost:8080/chat-old (backup interface)
   • Design: ADAM-matching theme - pure black background, white text, gray accents
   • Supported Languages: 180+ with full syntax highlighting
   • Key Shortcuts: Ctrl+S (save), Ctrl+R (refresh), Ctrl+N (new file)
   • Features: IntelliSense, error detection, find/replace, multiple cursors, multi-tab
   • File Tree: Click files to open, automatic language detection   • Status Bar: Real-time feedback on operations and modifications
   • Clean UI: Professional, consistent monochromatic design
   • Chat Panel: AI can reference and modify open files (Phase 5)
   • Windmill: Workflow/data management integration (Phase 5)

 ▶ TROUBLESHOOTING PROCEDURES:
   • Monaco Editor not loading:
     → Check internet connection (CDN dependency)
     → Verify browser compatibility (Chrome 90+, Firefox 88+)
   • File operations failing:
     → Check API endpoints: /api/files/list, /api/files/read, /api/files/write
     → Verify file permissions and path validity
   • AI chat not responding:
     → Check Ollama status and model availability
     → Restart backend if needed
 ▶ ROADMAP & FUTURE PLANS:
   • Studio interface with Monaco+AI+search (multi-tab, chat, search, git, context menus)
   • Windmill integration for advanced workflow/data management
   • Chat panel with file/project context and direct file operations
   • Multi-file/project operations, advanced search, git/source control, real-time collaboration
   • Semantic search and vector DB integration
   • All changes and new features must be reflected in documentation and SOP

╚════════════════════════════════════════════════════════════════════════════╝
