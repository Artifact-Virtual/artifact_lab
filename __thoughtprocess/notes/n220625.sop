# USER LOCKED
1 - warp install for simulation or altrenate.
2 - add multi language support
3 - automation setup


------------------------------------------------------------------------------
╔════════════════════════════════════════════════════════════════════════════╗
║                  STANDARD OPERATING PROCEDURES (SOP)                       ║
╠════════════════════════════════════════════════════════════════════════════╣    1. ▶ Always run `./run.sh` (Linux/macOS) or `./run.ps1` (Windows) from root to start ADE Desktop.
    2. ▶ The startup script handles all service orchestration automatically (Ollama + ADE services + Electron UI).
    3. ▶ ADE webchat service runs on http://localhost:9000 for desktop integration.
    4. ▶ Ollama runs on dedicated port 11500 for ADE Desktop (isolated from other Ollama instances).
    5. ▶ Use the Desktop IDE for Monaco+AI+search workflows with native app experience.
    6. ▶ Follow PEP8 guidelines for Python code.
    7. ▶ Always update this file. ALWAYS. No exceptions.
    8. ▶ Perform a full codebase review periodically to ensure no errors exist.
                ▸ Fix all issues, big or small, without workarounds or cutting corners.
    9. ▶ Always validate and fix JSON config files for strict compliance
                ▸ (no trailing commas, valid syntax).
   10. ▶ Ensure all model/provider logic is routed through config files (config.json and ade_core/config.json).
   11. ▶ Standardize import paths and config resolution for all entry-point scripts.
   12. ▶ ALWAYS UPDATE ADE\config.json with latest updated SOPs (this file).
   13. ▶ LLM must have secure, auditable read/write access to the codebase via backend API.
   14. ▶ LLM should be able to both suggest and directly make codebase changes (with audit trail).
   15. ▶ Backend API must support advanced file/code management (list, read, write, create, search).
   16. ▶ Monaco Editor is primary development interface; ensure all file operations work seamlessly.
   17. ▶ If using vector DB or code store, ensure LLM can utilize for semantic code search.
   18. ▶ All LLM-driven changes must be user-controllable (approve, undo) and meticulously logged.
   19. ▶ ADE Studio must maintain VS Code-like experience with professional AMOLED interface.
   20. ▶ Monitor server status regularly; restart if connections fail.
   21. ▶ Ensure Ollama service is running before starting any ADE components.
   22. ▶ Use Monaco Editor as primary development environment with AVA chat integration.
   23. ▶ Integrate Windmill for enhanced workflow automation (planned, see roadmap).
   24. ▶ Maintain comprehensive documentation for all studio capabilities.
   25. ▶ Use the integrated chat panel in Studio for AI-driven file operations and code assistance.

╠════════════════════════════════════════════════════════════════════════════╣
║                                CHANGELOG                                   ║
╠════════════════════════════════════════════════════════════════════════════╣
📅 2025-06-24T14:10:00Z - MAJOR CODEBASE CLEANUP & ARCHITECTURE REFINEMENT
   ✅ COMPLETED: Comprehensive cleanup of legacy files and services
   ✅ FIXED: Startup script path resolution issue (Set-Location path error)
   ✅ REMOVED: All unnecessary background services (watcher, summarizer, etc.)
   ✅ STREAMLINED: Only essential services now start (Ollama + webchat)
   ✅ OPTIMIZED: Electron main.js cleaned up (removed unused imports/vars)
   ✅ CONFIRMED: ADE webchat service works perfectly on port 9000
   ✅ ISOLATED: Desktop IDE is now fully self-contained in ADE-Desktop directory
   
    FILES REMOVED:
   - ADE/main.py, enhanced_visualizer.py, watcher.py, summarizer.py
   - ADE/dependency_indexer.py, starmap.py, llm_file_operations.py
   - ADE/file_manager*.html, studio.html, ollama_client.py, terminal.*
   - ADE-Desktop/terminal.*, update-manager.js (unused/legacy)
   - Generated files: audit_log.json, system_summary.json, dependency_index.json
   
    CURRENT CLEAN ARCHITECTURE:
   - run.ps1/sh → Ollama (11500) + Webchat (9000) → Electron UI
   - ADE/ contains only: config.json, ollama_interface.py, studio_enhanced.html, webchat.py, themes.css
   - ADE-Desktop/ contains only: ade_core/, renderer/, main.js, preload.js, package.json
   
    STARTUP OPTIMIZED:
   - Fixed path resolution in run.ps1 ($workspaceRoot\ADE-Desktop)
   - Removed unnecessary service wait loops
   - Eliminated all legacy background service startup
   - Electron launches directly with npm start from correct directory
╠════════════════════════════════════════════════════════════════════════════╣ 
 ✅ PHASE 1 COMPLETE: Backend API for file management implemented and operational
 ✅ Enhanced webchat running on http://localhost:8080 with file operations API
 ✅ File operations audit logging system implemented with secure path validation
 ✅ API endpoints for list, read, write, create, search operations functional
 ✅ LLM has enhanced context awareness of file management capabilities
 ✅ PHASE 2 COMPLETE: Monaco Editor integration for direct code editing
 ✅ Full-featured code editor with syntax highlighting, file explorer, and save functionality
 ✅ LLM interaction logging and audit trail system implemented
 ✅ Enhanced chat interface with file context and code modification capabilities
 ✅ PHASE 3 COMPLETE: System operational with troubleshooting procedures ✅ AVA system fully functional with comprehensive monitoring and restart capabilities 
 ✅ PHASE 4 COMPLETE: Studio Enhanced Implementation
 ✅ Professional VS Code-like interface with 180+ language support
 ✅ ADE Studio at / (root) endpoint - now default interface
 ✅ AMOLED theme: pure black background (#000000), white text (#ffffff), consistent theming
 ✅ Clean, professional UI with true AMOLED black theme throughout
 ✅ PHASE 5 COMPLETE: Directory Restructure & Naming Consistency
 ✅ Renamed workspace_manager → ADE (Artifact Development Engine)
 ✅ Updated all file paths and config references
 ✅ Consistent naming: ADE = platform, AVA = AI assistant
 ✅ Fixed all import paths and configuration loading
 ✅ Updated documentation and interface naming ✅ Studio interface (Monaco+AI+search+chat) fully operational ✅ PHASE 7 COMPLETE: Desktop Application Architecture
 ✅ Created Electron-based ADE Desktop with native app experience and bezelless design
 ✅ Separated service orchestration: run.sh/run.ps1 manage all backend services
 ✅ Electron app is pure UI wrapper - no service management conflicts
 ✅ Port isolation: Ollama on 11500, ADE webchat on 9000, no conflicts with existing services
 ✅ Robust startup: services start first, then Electron UI connects when ready
 ✅ Simplified troubleshooting: single entry point (run.sh/run.ps1) manages everything
 🔄 PHASE 8 PENDING: Advanced integrations (Windmill, workflow automation)
 🔄 PHASE 9 PENDING: Multi-file/project operations, advanced search, git, and collaboration

╠════════════════════════════════════════════════════════════════════════════╣
║              ADE STUDIO & AVA OPERATIONAL PROCEDURES (2025-06-24)          ║
╠════════════════════════════════════════════════════════════════════════════╣ ▶ DAILY STARTUP CHECKLIST:
   1. Verify Ollama is available: `ollama list` (optional - ADE will work without it)
   2. Start complete ADE Desktop system: `./run.sh` (Linux/macOS) or `./run.ps1` (Windows) from root
      → This starts: Ollama (port 11500) + ADE services + Desktop UI automatically
   3. ADE Desktop app will launch automatically after services are ready
   4. Test AVA chat integration: Use AVA button in toolbar or chat panel
   5. Verify file operations: open, edit, save functionality with smooth animations
   6. Confirm AMOLED theme: pure black backgrounds, white text, subtle animations ▶ ADE DESKTOP OPERATIONS:
   • Primary Interface: Native Electron Desktop Application (ADE Desktop)
   • Startup Command: `./run.sh` (Linux/macOS) or `./run.ps1` (Windows) - starts all services + UI
   • Service Architecture: Ollama (port 11500) + ADE webchat (port 9000) + Desktop UI wrapper
   • Platform: ADE (Artifact Development Engine) with native desktop experience
   • AI Assistant: AVA (Artifact Virtual Assistant) - integrated in desktop chat panel
   • Theme: True AMOLED black - pure black (#000000) background, white (#ffffff) text
   • Animations: Subtle 0.15s transitions, hover effects, focus animations for professional feel
   • Supported Languages: 180+ with full syntax highlighting via Monaco Editor
   • Key Shortcuts: Ctrl+S (save), Ctrl+Shift+S (save all), Ctrl+F (find), Ctrl+H (replace)
   • Features: IntelliSense, error detection, find/replace, multiple cursors, multi-tab editing
   • File Explorer: Sidebar with folder navigation, smooth animations, sorted display
   • Search: Real-time file search in sidebar with instant results and hover effects
   • Status Bar: Real-time feedback on file operations, cursor position, language detection
   • Chat Panel: AVA with file context, direct code modifications, toggle via toolbar
   • Context Menus: Right-click for file operations (copy, cut, paste, rename, delete)
   • Tabs: Multi-file editing with modified indicators, close buttons, and hover animations
   • Toolbar: Save, format, find/replace, AVA toggle, theme toggle, word wrap, minimap controls ▶ TROUBLESHOOTING PROCEDURES:
   • ADE Desktop won't start:
     → Ensure Node.js is installed (v16+)
     → Check if ports 9000 or 11500 are in use by other processes
     → Try running `./run.ps1` or `./run.sh` as administrator/sudo if needed
   • Services not connecting:
     → Services are started automatically by startup scripts
     → Check console output during startup for error messages
     → Verify Python is installed and accessible
   • Monaco Editor not loading:
     → Check internet connection (CDN dependency)
     → Verify browser compatibility in Electron (automatic)
   • File operations failing:
     → Check API endpoints: /api/files/list, /api/files/read, /api/files/write
     → Verify file permissions and path validity
     → Ensure ADE-Desktop/ade_core/config.json exists and is properly formatted
   • AVA chat not responding:
     → Check if Ollama is running: startup script handles this automatically
     → Verify model availability (codellama:7b default)
     → Check ADE-Desktop/ade_core/config.json for correct Ollama endpoint (port 11500)
     → Restart entire system: close ADE Desktop and run startup script again
   • AMOLED theme issues:
     → Verify CSS consistency in renderer files
     → Check for gray backgrounds - should be pure black (#000000)
     → Ensure text is white (#ffffff) for maximum contrast▶ ROADMAP & FUTURE PLANS:
   • Multi-project workspace management and project templates
   • Enhanced git integration with visual diff and merge tools
   • Windmill integration for advanced workflow/data management automation
   • Advanced search with regex, file content search, and cross-project search
   • Real-time collaboration features and shared workspaces
   • Semantic search and vector DB integration for intelligent code discovery
   • Plugin system for custom extensions and third-party integrations
   • All changes and new features must be reflected in documentation and SOP    ▶ CURRENT SYSTEM STATE (June 24, 2025):
   • Architecture: ADE Desktop - Native Electron application with backend service orchestration
   • Entry Point: ./run.sh (Linux/macOS) or ./run.ps1 (Windows) - handles all service startup + UI launch
   • Backend Services: Ollama (port 11500) + ADE webchat (port 9000) + background services
   • Main UI: ADE-Desktop/renderer/ (Electron-based Monaco Editor + AVA + File Explorer)
   • Configuration: ADE-Desktop/ade_core/config.json (isolated config for desktop app)
   • Service Architecture: External service management (no Electron/Node service conflicts)
   • Theme: True AMOLED black theme with subtle professional animations
   • Status: Fully operational desktop IDE with robust service orchestration and native app experience

📅 2025-06-24T19:30:00Z - IFRAME INTEGRATION COMPLETE & CONNECTION ISSUES RESOLVED
   ✅ RESOLVED: Progress loading getting stuck at 95% (race condition fixed)
   ✅ REPLACED: Deprecated <webview> with modern <iframe> for IDE embedding
   ✅ ENHANCED: Connection flow with proper timer management and state handling
   ✅ IMPROVED: Iframe loading with cross-origin handling and timeout management
   ✅ OPTIMIZED: Progress simulation timing and cleanup of intervals/timeouts
   ✅ VERIFIED: Backend services running correctly (Ollama 11500, ADE 9000)
   ✅ CONFIRMED: Bezelless iframe integration working with AMOLED theme
   
   • Robust Electron-based desktop IDE with iframe-embedded webchat interface
   • Reliable service orchestration with proper connection handling
   • Modern UI components replacing all deprecated elements
   • Enhanced error handling and user feedback systems
   • Professional AMOLED theme with bezelless design
   • No more connection race conditions or stuck loading states

                                  STATUS: ✅
╚════════════════════════════════════════════════════════════════════════════╝
