# Network Topology Map

import networkx as nx
import matplotlib.pyplot as plt
import random

# --- Helper Function for Drawing ---

def draw_topology_step(graph, step_description, pause_seconds=0.5, layout_func=nx.spring_layout):
    """
    Draws the current state of the topology and pauses for visualization.

    Args:
        graph (nx.Graph): The networkx graph to draw.
        step_description (str): A description of the current step.
        pause_seconds (float): How long to pause the display (in seconds).
        layout_func (callable): Function from networkx.drawing.layout to use for node positioning.
    """
    plt.figure(figsize=(10, 7)) # Increased figure size for clarity
    pos = layout_func(graph)  # Compute node positions
    # Draw nodes and edges
    nx.draw_networkx_nodes(graph, pos, node_color='skyblue', node_size=2500)
    nx.draw_networkx_edges(graph, pos, edge_color='gray', width=1.5, alpha=0.7)
    nx.draw_networkx_labels(graph, pos, font_size=12, font_weight='bold', font_color='darkblue')

    plt.title(f"Step: {step_description}", fontsize=18)
    plt.axis('off') # Hide axes
    plt.show(block=False) # Show plot non-blocking
    plt.pause(pause_seconds) # Pause for a moment
    plt.close() # Close the plot to prepare for the next one

# --- Sequential Topology Generation Function ---

def generate_sequential_topology(num_nodes, connection_probability=0.3, max_connections_per_node=3):
    """
    Generates a topology sequentially by adding nodes and connecting them
    to existing nodes based on specified rules.

    This function simulates a network growing over time or in phases.

    Args:
        num_nodes (int): The total number of nodes to generate.
        connection_probability (float): The probability (0.0 to 1.0) for a new node
                                        to attempt a connection with each existing node.
        max_connections_per_node (int): Maximum number of connections a new node
                                         will form with existing nodes.
    Returns:
        nx.Graph: The final sequentially generated networkx graph.
    """
    if num_nodes < 1:
        raise ValueError("Number of nodes must be at least 1.")
    if not (0.0 <= connection_probability <= 1.0):
        raise ValueError("Connection probability must be between 0.0 and 1.0.")
    if max_connections_per_node < 0:
        raise ValueError("Max connections per node cannot be negative.")

    graph = nx.Graph()
    print("Starting sequential topology generation...")

    for i in range(num_nodes):
        # Step 1: Add a new node
        graph.add_node(i)
        print(f"Added Node: {i}")
        draw_topology_step(graph, f"Adding Node {i}", pause_seconds=0.7)

        # Step 2: Connect the new node to existing nodes
        if i > 0: # Only connect if there are existing nodes
            existing_nodes = list(range(i)) # Nodes already in the graph
            random.shuffle(existing_nodes) # Randomize connection attempts

            connections_made = 0
            for existing_node in existing_nodes:
                if connections_made >= max_connections_per_node:
                    break # Stop if max connections for this node are reached

                # Rule 1: Connect with a certain probability
                if random.random() < connection_probability:
                    # Rule 2: Ensure the existing node is not already at its max degree
                    # This rule is a simplification; a more complex one would check global degree limits
                    if graph.degree(existing_node) < max_connections_per_node + 2 : # Arbitrary small buffer
                        graph.add_edge(i, existing_node)
                        print(f"  Connected {i} to {existing_node}")
                        connections_made += 1
                        draw_topology_step(graph, f"Connecting {i} to {existing_node}", pause_seconds=0.7)

        print(f"Current graph state: Nodes={graph.nodes}, Edges={graph.edges}\n")

    print("\nSequential topology generation complete.")
    return graph

# --- Example Usage ---
if __name__ == "__main__":
    print("--- Sequential Topology Generation Example ---")
    # Generate a topology with 7 nodes, 40% connection probability, max 2 connections per new node
    final_topology = generate_sequential_topology(
        num_nodes=7,
        connection_probability=0.4,
        max_connections_per_node=2
    )

    print("\nFinal Topology Details:")
    print(f"Nodes: {final_topology.nodes}")
    print(f"Edges: {final_topology.edges}")

    # Optional: Draw the final topology at the end
    draw_topology_step(final_topology, "Final Generated Topology", pause_seconds=2)
    print("\nNote: The visualization steps will appear as separate pop-up windows.")
    print("You may need to install matplotlib and networkx: pip install matplotlib networkx")



-------------------------------------------------------------------------------------


<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sequential Topology Visualizer</title>
    <!-- Tailwind CSS CDN for basic styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- D3.js for graph visualization -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400&display=swap" rel="stylesheet">
    <style>
        body {
            background-color: #000000; /* Pure Black */
            color: #FFFFFF; /* Pure White */
            font-family: 'Manrope', sans-serif;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 20px; /* Add some padding for overall layout */
            box-sizing: border-box; /* Include padding in element's total width and height */
            overflow: hidden; /* Hide scrollbars, relying on content fitting */
        }

        .fade-container {
            position: fixed; /* Fix to viewport */
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            pointer-events: none; /* Allows clicks to pass through to elements below */
            z-index: -1; /* Ensures it's behind content */
            background:
                /* Top fade */
                linear-gradient(to bottom, rgba(0,0,0,1) 0%, rgba(0,0,0,0) 5%),
                /* Bottom fade */
                linear-gradient(to top, rgba(0,0,0,1) 0%, rgba(0,0,0,0) 5%),
                /* Left fade */
                linear-gradient(to right, rgba(0,0,0,1) 0%, rgba(0,0,0,0) 5%),
                /* Right fade */
                linear-gradient(to left, rgba(0,0,0,1) 0%, rgba(0,0,0,0) 5%);
            background-repeat: no-repeat;
            background-size:
                100% 10%, /* Increase fade area slightly for visual impact */
                100% 10%,
                10% 100%,
                10% 100%;
            background-position:
                top,
                bottom,
                left,
                right;
            background-blend-mode: normal;
        }

        .main-content-wrapper {
            position: relative;
            z-index: 10; /* Ensure content is above fade effect */
            text-align: center;
            width: 95%; /* Responsive width */
            max-width: 1000px; /* Max width for readability */
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }

        /* SVG container for D3.js graph */
        #network-canvas {
            width: 100%;
            height: 500px; /* Fixed height for the visualization area */
            border: 1px solid #333333; /* Subtle border for the canvas */
            background-color: #1a1a1a; /* Dark background for the graph area */
            border-radius: 12px; /* Rounded corners */
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.05); /* Subtle glow */
        }

        .node circle {
            stroke: #FFFFFF; /* Pure white stroke for nodes */
            stroke-width: 2px;
            cursor: grab;
            transition: fill 0.2s ease, r 0.2s ease; /* Smooth transitions for hover */
        }

        .node circle:hover {
            fill: #4A90E2; /* Blue fill on hover */
            r: 10px;
        }

        .node text {
            fill: #FFFFFF; /* Pure white text for node labels */
            font-size: 10px;
            text-anchor: middle;
            dominant-baseline: central;
            pointer-events: none; /* Do not block mouse events on circle */
        }

        .link {
            stroke: #FFFFFF; /* Pure white stroke for links */
            stroke-opacity: 0.6;
            stroke-width: 1.5px;
            transition: stroke-opacity 0.2s ease, stroke-width 0.2s ease; /* Smooth transitions */
        }

        .link.new-edge {
            stroke: #00FF00; /* Bright green for newly added edges */
            stroke-width: 3px;
            opacity: 1;
        }

        .button-group {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 15px;
            margin-top: 20px;
        }

        button {
            background-color: #FFFFFF; /* Pure white button */
            color: #000000; /* Pure black text */
            padding: 12px 25px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s ease, color 0.2s ease, transform 0.2s ease;
            box-shadow: 0 4px 15px rgba(255, 255, 255, 0.1); /* White shadow */
        }

        button:hover {
            background-color: #CCCCCC; /* Slightly gray on hover */
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 255, 255, 0.2);
        }

        button:disabled {
            background-color: #333333;
            color: #666666;
            cursor: not-allowed;
            box-shadow: none;
            transform: none;
        }

        .parameters {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            margin-bottom: 20px;
        }

        .param-item {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            color: #DDDDDD;
            font-size: 0.9rem;
        }

        .param-item label {
            margin-bottom: 5px;
            font-weight: 300;
        }

        .param-item input[type="number"] {
            background-color: #1a1a1a;
            border: 1px solid #444444;
            color: #FFFFFF;
            padding: 8px 12px;
            border-radius: 6px;
            width: 80px; /* Fixed width for number inputs */
            text-align: center;
        }

        .param-item input[type="range"] {
            -webkit-appearance: none;
            width: 150px;
            height: 8px;
            background: #444444;
            outline: none;
            opacity: 0.7;
            -webkit-transition: .2s;
            transition: opacity .2s;
            border-radius: 4px;
        }

        .param-item input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: #FFFFFF;
            cursor: pointer;
            box-shadow: 0 0 5px rgba(255, 255, 255, 0.5);
        }

        .param-item input[type="range"]::-moz-range-thumb {
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: #FFFFFF;
            cursor: pointer;
            box-shadow: 0 0 5px rgba(255, 255, 255, 0.5);
        }

        #current-step-status {
            font-size: 1rem;
            color: #DDDDDD;
            margin-top: 15px;
            height: 20px; /* Reserve space to prevent layout shifts */
        }
    </style>
</head>
<body class="bg-black text-white">
    <div class="fade-container"></div>

    <div class="main-content-wrapper">
        <header class="text-center">
            <h1 class="text-4xl sm:text-5xl lg:text-6xl font-extralight leading-tight">ARTIFACT VIRTUAL</h1>
            <p class="text-lg text-gray-400 mt-2">Sequential Network Topology Generation</p>
        </header>

        <div class="parameters">
            <div class="param-item">
                <label for="numNodesInput">Nodes:</label>
                <input type="number" id="numNodesInput" value="15" min="1" max="50">
            </div>
            <div class="param-item">
                <label for="connProbInput">Conn. Prob.: <span id="connProbValue">0.3</span></label>
                <input type="range" id="connProbInput" min="0" max="1" step="0.05" value="0.3">
            </div>
            <div class="param-item">
                <label for="maxConnInput">Max Conn. Per Node:</label>
                <input type="number" id="maxConnInput" value="3" min="1" max="10">
            </div>
            <div class="param-item">
                <label for="delayInput">Delay (ms):</label>
                <input type="number" id="delayInput" value="200" min="50" max="1000" step="50">
            </div>
        </div>

        <div id="network-canvas"></div>

        <div class="button-group">
            <button id="startButton">Generate Sequentially</button>
            <button id="resetButton" disabled>Reset</button>
        </div>

        <div id="current-step-status" class="mt-4"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- D3.js Setup ---
            const svg = d3.select("#network-canvas")
                .append("svg")
                .attr("width", "100%")
                .attr("height", "100%");

            const width = document.getElementById('network-canvas').clientWidth;
            const height = document.getElementById('network-canvas').clientHeight;

            let simulation = d3.forceSimulation()
                .force("link", d3.forceLink().id(d => d.id).distance(100))
                .force("charge", d3.forceManyBody().strength(-300)) // Repel nodes
                .force("center", d3.forceCenter(width / 2, height / 2))
                .force("collide", d3.forceCollide(25)); // Prevent nodes from overlapping too much

            let linkGroup = svg.append("g").attr("class", "links");
            let nodeGroup = svg.append("g").attr("class", "nodes");
            let textGroup = svg.append("g").attr("class", "texts");

            let nodes = [];
            let links = [];

            // --- UI Elements ---
            const numNodesInput = document.getElementById('numNodesInput');
            const connProbInput = document.getElementById('connProbInput');
            const connProbValueSpan = document.getElementById('connProbValue');
            const maxConnInput = document.getElementById('maxConnInput');
            const delayInput = document.getElementById('delayInput');
            const startButton = document.getElementById('startButton');
            const resetButton = document.getElementById('resetButton');
            const currentStepStatus = document.getElementById('current-step-status');

            // --- Event Listeners for Parameters ---
            connProbInput.addEventListener('input', () => {
                connProbValueSpan.textContent = parseFloat(connProbInput.value).toFixed(2);
            });

            // --- Visualization Update Function ---
            function updateVisualization() {
                // Update links
                let link = linkGroup.selectAll("line")
                    .data(links, d => d.source.id + "-" + d.target.id);

                link.enter().append("line")
                    .attr("class", "link")
                    .attr("stroke", "#FFFFFF") // Default color
                    .attr("stroke-opacity", 0.6)
                    .attr("stroke-width", 1.5)
                    .merge(link);

                link.exit().remove();

                // Update nodes
                let node = nodeGroup.selectAll("circle")
                    .data(nodes, d => d.id);

                node.enter().append("circle")
                    .attr("class", "node")
                    .attr("r", 8) // Initial radius
                    .attr("fill", "skyblue") // Initial fill color
                    .call(d3.drag() // Enable dragging nodes
                        .on("start", dragstarted)
                        .on("drag", dragged)
                        .on("end", dragended))
                    .merge(node);

                node.exit().remove();

                // Update node labels
                let text = textGroup.selectAll("text")
                    .data(nodes, d => d.id);

                text.enter().append("text")
                    .attr("class", "node-label")
                    .attr("dy", "0.35em") // Vertical alignment
                    .text(d => d.id)
                    .merge(text);

                text.exit().remove();

                // Update simulation with new data
                simulation.nodes(nodes);
                simulation.force("link").links(links);

                simulation.alpha(1).restart(); // Restart simulation

                simulation.on("tick", () => {
                    link
                        .attr("x1", d => d.source.x)
                        .attr("y1", d => d.source.y)
                        .attr("x2", d => d.target.x)
                        .attr("y2", d => d.target.y);

                    node
                        .attr("cx", d => d.x)
                        .attr("cy", d => d.y);

                    text
                        .attr("x", d => d.x)
                        .attr("y", d => d.y);
                });
            }

            // --- Dragging Functions for D3.js ---
            function dragstarted(event, d) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(event, d) {
                d.fx = event.x;
                d.fy = event.y;
            }

            function dragended(event, d) {
                if (!event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }

            // --- Sequential Generation Logic ---
            let currentStep = 0;
            let totalNodesToGenerate = 0;
            let isGenerating = false;
            let generationInterval = null;

            async function startSequentialGeneration() {
                if (isGenerating) return;

                isGenerating = true;
                startButton.disabled = true;
                resetButton.disabled = false;

                totalNodesToGenerate = parseInt(numNodesInput.value);
                const connectionProbability = parseFloat(connProbInput.value);
                const maxConnectionsPerNode = parseInt(maxConnInput.value);
                const delay = parseInt(delayInput.value);

                nodes = [];
                links = [];
                updateVisualization(); // Clear initial state

                for (let i = 0; i < totalNodesToGenerate; i++) {
                    currentStepStatus.textContent = `Adding Node ${i}...`;
                    // Add node
                    nodes.push({ id: i });
                    updateVisualization();
                    await new Promise(resolve => setTimeout(resolve, delay));

                    if (i > 0) {
                        const existingNodes = [...nodes].slice(0, i); // Copy existing nodes
                        // Randomize connection attempts
                        for (let k = existingNodes.length - 1; k > 0; k--) {
                            const j = Math.floor(Math.random() * (k + 1));
                            [existingNodes[k], existingNodes[j]] = [existingNodes[j], existingNodes[k]];
                        }

                        let connectionsMade = 0;
                        for (const existingNode of existingNodes) {
                            if (connectionsMade >= maxConnectionsPerNode) {
                                break;
                            }

                            if (Math.random() < connectionProbability) {
                                // Simple check to avoid excessive connections (can be refined)
                                const existingNodeDegree = links.filter(l => l.source.id === existingNode.id || l.target.id === existingNode.id).length;
                                if (existingNodeDegree < maxConnectionsPerNode + 2) {
                                    const newLink = { source: i, target: existingNode.id };
                                    links.push(newLink);
                                    updateVisualization(); // Update with new link
                                    // Highlight the new edge for a brief moment
                                    d3.select(linkGroup.selectAll("line").filter(d => (d.source.id === i && d.target.id === existingNode.id) || (d.source.id === existingNode.id && d.target.id === i)))
                                        .attr("class", "link new-edge")
                                        .transition()
                                        .duration(delay * 0.8)
                                        .attr("class", "link");

                                    currentStepStatus.textContent = `Connecting ${i} to ${existingNode.id}...`;
                                    await new Promise(resolve => setTimeout(resolve, delay));
                                    connectionsMade++;
                                }
                            }
                        }
                    }
                }
                currentStepStatus.textContent = `Generation Complete: ${nodes.length} Nodes, ${links.length} Edges.`;
                isGenerating = false;
                startButton.disabled = false;
            }

            function resetVisualization() {
                isGenerating = false;
                if (generationInterval) {
                    clearTimeout(generationInterval);
                }
                nodes = [];
                links = [];
                updateVisualization();
                startButton.disabled = false;
                resetButton.disabled = true;
                currentStepStatus.textContent = '';
                simulation.alphaTarget(0); // Stop the simulation entirely on reset
            }

            startButton.addEventListener('click', startSequentialGeneration);
            resetButton.addEventListener('click', resetVisualization);

            // Initial setup for the UI
            resetVisualization(); // Ensures buttons are in correct state
        });
    </script>
</body>
</html>
